<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.match.dataassert.mapper.CountAddrCountAddrMapper">
  <resultMap id="BaseResultMap" type="org.match.dataassert.datadomain.CountAddrDomain">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="addr_name" jdbcType="CHAR" property="addrName" />
    <result column="addr_count" jdbcType="TINYINT" property="addrCount" />
    <result column="addr" jdbcType="VARCHAR" property="addr" />
    <result column="is_del" jdbcType="INTEGER" property="isDel" />
    <result column="remark_1" jdbcType="VARCHAR" property="remark1" />
    <result column="remark_2" jdbcType="VARCHAR" property="remark2" />
    <result column="remark_3" jdbcType="VARCHAR" property="remark3" />
  </resultMap>
  <sql id="Base_Column_List">
    id, addr_name, addr_count, addr, is_del, remark_1, remark_2, remark_3
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from tb_count_addr
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from tb_count_addr
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="org.match.dataassert.datadomain.CountAddrDomain" useGeneratedKeys="true">
    insert into tb_count_addr (addr_name, addr_count, addr, 
      is_del, remark_1, remark_2, 
      remark_3)
    values (#{addrName,jdbcType=CHAR}, #{addrCount,jdbcType=TINYINT}, #{addr,jdbcType=VARCHAR}, 
      #{isDel,jdbcType=INTEGER}, #{remark1,jdbcType=VARCHAR}, #{remark2,jdbcType=VARCHAR}, 
      #{remark3,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="org.match.dataassert.datadomain.CountAddrDomain" useGeneratedKeys="true">
    insert into tb_count_addr
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="addrName != null">
        addr_name,
      </if>
      <if test="addrCount != null">
        addr_count,
      </if>
      <if test="addr != null">
        addr,
      </if>
      <if test="isDel != null">
        is_del,
      </if>
      <if test="remark1 != null">
        remark_1,
      </if>
      <if test="remark2 != null">
        remark_2,
      </if>
      <if test="remark3 != null">
        remark_3,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="addrName != null">
        #{addrName,jdbcType=CHAR},
      </if>
      <if test="addrCount != null">
        #{addrCount,jdbcType=TINYINT},
      </if>
      <if test="addr != null">
        #{addr,jdbcType=VARCHAR},
      </if>
      <if test="isDel != null">
        #{isDel,jdbcType=INTEGER},
      </if>
      <if test="remark1 != null">
        #{remark1,jdbcType=VARCHAR},
      </if>
      <if test="remark2 != null">
        #{remark2,jdbcType=VARCHAR},
      </if>
      <if test="remark3 != null">
        #{remark3,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="org.match.dataassert.datadomain.CountAddrDomain">
    update tb_count_addr
    <set>
      <if test="addrName != null">
        addr_name = #{addrName,jdbcType=CHAR},
      </if>
      <if test="addrCount != null">
        addr_count = #{addrCount,jdbcType=TINYINT},
      </if>
      <if test="addr != null">
        addr = #{addr,jdbcType=VARCHAR},
      </if>
      <if test="isDel != null">
        is_del = #{isDel,jdbcType=INTEGER},
      </if>
      <if test="remark1 != null">
        remark_1 = #{remark1,jdbcType=VARCHAR},
      </if>
      <if test="remark2 != null">
        remark_2 = #{remark2,jdbcType=VARCHAR},
      </if>
      <if test="remark3 != null">
        remark_3 = #{remark3,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.match.dataassert.datadomain.CountAddrDomain">
    update tb_count_addr
    set addr_name = #{addrName,jdbcType=CHAR},
      addr_count = #{addrCount,jdbcType=TINYINT},
      addr = #{addr,jdbcType=VARCHAR},
      is_del = #{isDel,jdbcType=INTEGER},
      remark_1 = #{remark1,jdbcType=VARCHAR},
      remark_2 = #{remark2,jdbcType=VARCHAR},
      remark_3 = #{remark3,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>